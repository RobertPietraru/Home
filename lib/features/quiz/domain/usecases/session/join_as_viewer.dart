  import 'package:dartz/dartz.dart'; import '../../../../../core/classes/usecase.dart'; import '../../failures/quiz_failures.dart'; import '../../repositories/quiz_repository.dart'; class JoinAsViewerUsecase extends UseCase<JoinAsViewerUsecaseResult, JoinAsViewerUsecaseParams> { const JoinAsViewerUsecase(this.quizRepository); final QuizRepository quizRepository; @override Future<Either<QuizFailure, JoinAsViewerUsecaseResult>> call(params) async { return quizRepository.joinAsViewer(params); } } class JoinAsViewerUsecaseParams extends Params { const JoinAsViewerUsecaseParams(); } class JoinAsViewerUsecaseResult extends Response { const JoinAsViewerUsecaseResult(); }
